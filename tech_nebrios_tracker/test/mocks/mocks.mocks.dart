// Mocks generated by Mockito 5.4.6 from annotations
// in tech_nebrios_tracker/test/mocks/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tech_nebrios_tracker/data/models/alimento_model.dart' as _i4;
import 'package:tech_nebrios_tracker/data/repositories/alimento_repository.dart'
    as _i5;
import 'package:tech_nebrios_tracker/domain/alimentacion_domain.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EditarAlimentoCasoUso].
///
/// See the documentation for Mockito's code generation for more information.
class MockEditarAlimentoCasoUso extends _i1.Mock
    implements _i2.EditarAlimentoCasoUso {
  MockEditarAlimentoCasoUso() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> editar({required _i4.Alimento? alimento}) =>
      (super.noSuchMethod(
            Invocation.method(#editar, [], {#alimento: alimento}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [AlimentoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlimentoRepository extends _i1.Mock
    implements _i5.AlimentoRepository {
  MockAlimentoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Alimento>> obtenerAlimentos() =>
      (super.noSuchMethod(
            Invocation.method(#obtenerAlimentos, []),
            returnValue: _i3.Future<List<_i4.Alimento>>.value(<_i4.Alimento>[]),
          )
          as _i3.Future<List<_i4.Alimento>>);

  @override
  _i3.Future<void> editarAlimento(_i4.Alimento? alimento) =>
      (super.noSuchMethod(
            Invocation.method(#editarAlimento, [alimento]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
